// Use header guards
#ifndef FILE_EXT
#define FILE_EXT

// Standard includes first
#include <iostream>

// includes relative to this file
#include "file_in_same_dir.cpp"
#include "../above.cpp"
#include "below/file.cpp"

// All outside of project includes clumped based on project
#include <GL/gl.h>
#include <GL/glu.h>

#include <SDL/SDL.h>

// Classes defined in header files...
/// Triple slashes for documentation
class UppercaseForEachWord
{
	public:
		UpperCaseForEachWord();

		void PublicMethod();

		// Getter for m_ProtectedVariable
		unsigned int ProtectedVariable();

		unsigned int memberVariableThatsPublic;
		unsigned int x;

	protected:
		// Camel case for variables, prepend m_ for those belonging to classes
		// Only make things non-public when needed
		unsigned int m_ProtectedVariable;
}

UpperCaseForEachWord::UpperCaseForEachWord() :
	// use initializer lists, wall will complain otherwise
	memberVariableThatsPublic( 0 ),
	x( 0 ),
	m_ProtectedVariable( 17 )
{
}

// Classes implemented in corresponding cpp...
void UpperCaseForEachWord::PublicMethod()
{
	Stdout.formatln( "Class methods use getter/setters too: {}", ProtectedVariable );
}

unsigned int UppercaseForEachWord::ProtectedVariable()
{
	// Use this-> when referencing anything in current object in clases
	return this->m_ProtectedVariable;
}

// Fold big long stuff, or logical blocks
void RandomFunction()
{ //{{{
} //}}}

int main( int argc, const char* argv[] )
{
	int integers[ 3 ];
	integers[ 0 ] = 5;

	std::cout << "Don't use unitialized vars: " << integers[ 2 ] << "flush output when needed\n";
	if( argsc > 1 )
	{
		cout << "More than one arg\n";
	}

	unsigned int a = 5, b = 7;
	// space stuff out so you can see what is happening
	unsigned int c = ( a + ( b * b ) ) * args[ 0 ][ 0 ];

	return 0;
}

// It's nice to now what we ended
#endif // FILE_EXT
// vim: ft=cpp:
