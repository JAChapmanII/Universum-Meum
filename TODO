Jun 07, 2010

Welcome to the experimental branch!

Jun 05, 2010

Nolan !!!!!!!!!!! - Give me an email, lest I think you're slacking out on me :p We should probably
both always look at the TODO whenever we pull, to see if there are anything done/undone etc.

As an update to the documentation thing, ddoc can generate code documentation when a declaration is
proceeded with a /// comment. Also, my vim is set up to highlight those lines differently so they're
eaiser to see, if you want that to work on yours let me know.

Jun 04, 2010

Zoom might also want to be added to game to work out some other problems.

The repel might still want to be tweaked to be cubic or something, something that gets stuff out of
aanother particle quickly, but doesn't affect it too much after that. This current antigrav
simulation might be the best way to do it, I don't know.

Somebody should really go through and comment the code better
To go with this, somebody should make a new logging function for each module that is able to have
numbers in it or something, that is really annoying. Maybe some function that can be imported that
just emulates Stdout() on a string, that would be nice.

Figure out what else we have to do, and prune out thing that have already been done.

Make it so that if you're going to place a particle on top of another, it just deletes the old one
or rig LMB to make, and RMB to delete the nearest one/underneath cursor one.

Jun 03, 2010

Split off repel, gravity, and point to be in a different project dir, just like the end equivalent
should work. Create a new program/new code to take the files, parse them as necessary and then
generate new output files/binaries based on the information contained within.

Implement scroll wheel support by adding in the viw width/height in addition to the actual window
width and height. This way, you can get the scroll wheel events (SDL_BUTTON_WHEELDOWN and
SDL_BUTTON_WHEELUP) as a means of zooming in and out by updating the view width/height.

2/5/10

Update the TODO, really important :D

Fix repel to use that elastic code

Fix everything now that it's all borked. To help with this, look into using less objects as that
could very well be screwing things up

1/5/10

The main thing that needs done code-wise at this point is to have the gravity and repel forces
reimplemented properly. The way we were going to do it, where you can define different polygons
and percents to apply I think would help a ton here, as we could have gravity drop off at radius
and have the repel pick up.

Other huge thing to do is separate the simulation part from the render part, such as using two
threads or anything that'll split them up.

A script that checks for basic parse errors would be nice.

Before 1/5/10

display.d:
	- Decide on the number of dimensions (a lot of OpenGL code will be different)
		Note: We could use a actor based system where display only sets up the OpenGL environment
		and then each actor then draws itself in whatever dimensions
	- Make this file and whatever it imports be able to take arbitrary objects based on some class
	  and display them in either 2 or 3 dimensions.
	- Needs to be able to get the objects added easily, have some common interface for defining how
	  shit is rendered

main.d:
	- This should look for different objects and seed conditions or something. Have the main GUI in
	  here from which the person can select a project to be compiled/run
	- Set up the main controls once a universe is loaded, zoom/save/quit/pan/rotate/fast/slow/pause
	  and everything else it might need such as changing the abstraction level.

particle.d:
	- Make it so that it holds some level of abstraction (e.g., "molecule") to class it under
	- Add some set of predefined things for it to do that can be strung together in some other file
	- Create some function called "work" or the like that is overridden in the other file

force.d:
	- Perhaps ditch in favor of allowing particles to do this?
		Note: might be best to allow forces to be created and then they can be "work"'d from a
		to allow easy duplication of wanted effect
	- Make these have a virtual "work" then?

# vim: textwidth=100: fo+=tc:
